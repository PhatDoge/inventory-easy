import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

const applicationTables = {
  // Add a users table to store Clerk user data
  users: defineTable({
    clerkId: v.string(),
    email: v.string(),
    firstName: v.optional(v.string()),
    lastName: v.optional(v.string()),
    imageUrl: v.optional(v.string()),
    createdAt: v.number(),
  }).index("by_clerk_id", ["clerkId"]),

  // Product catalog
  products: defineTable({
    name: v.string(),
    sku: v.string(),
    category: v.string(),
    description: v.optional(v.string()),
    unitCost: v.number(),
    sellingPrice: v.number(),
    supplier: v.string(),
    leadTimeDays: v.number(),
    minStockLevel: v.number(),
    maxStockLevel: v.number(),
    currentStock: v.number(),
    reorderPoint: v.number(),
    reorderQuantity: v.number(),
    isActive: v.boolean(),
    createdBy: v.id("users"),
  })
    .index("by_sku", ["sku"])
    .index("by_category", ["category"])
    .index("by_created_by", ["createdBy"])
    .searchIndex("search_products", {
      searchField: "name",
      filterFields: ["category", "isActive"],
    }),

  // Sales transactions for demand forecasting
  sales: defineTable({
    productId: v.id("products"),
    quantity: v.number(),
    unitPrice: v.number(),
    totalAmount: v.number(),
    saleDate: v.number(), // timestamp
    channel: v.string(), // "online", "store", "wholesale"
    customerId: v.optional(v.string()),
    createdBy: v.id("users"),
  })
    .index("by_product", ["productId"])
    .index("by_date", ["saleDate"])
    .index("by_product_and_date", ["productId", "saleDate"])
    .index("by_created_by", ["createdBy"]),

  // Stock movements (purchases, adjustments, etc.)
  stockMovements: defineTable({
    productId: v.id("products"),
    type: v.string(), // "purchase", "sale", "adjustment", "return"
    quantity: v.number(), // positive for inbound, negative for outbound
    unitCost: v.optional(v.number()),
    reference: v.optional(v.string()), // PO number, invoice, etc.
    notes: v.optional(v.string()),
    movementDate: v.number(),
    createdBy: v.id("users"),
  })
    .index("by_product", ["productId"])
    .index("by_date", ["movementDate"])
    .index("by_type", ["type"])
    .index("by_created_by", ["createdBy"]),

  // Demand forecasts generated by ML
  demandForecasts: defineTable({
    productId: v.id("products"),
    forecastDate: v.number(),
    predictedDemand: v.number(),
    confidence: v.number(), // 0-1 confidence score
    seasonalFactor: v.number(),
    trendFactor: v.number(),
    algorithm: v.string(), // "linear_regression", "arima", "seasonal_decomposition"
    createdAt: v.number(),
    createdBy: v.id("users"),
  })
    .index("by_product", ["productId"])
    .index("by_forecast_date", ["forecastDate"])
    .index("by_product_and_date", ["productId", "forecastDate"]),

  // Automated reorder suggestions
  reorderSuggestions: defineTable({
    productId: v.id("products"),
    suggestedQuantity: v.number(),
    urgency: v.string(), // "low", "medium", "high", "critical"
    reason: v.string(),
    estimatedStockoutDate: v.optional(v.number()),
    costImpact: v.number(),
    status: v.string(), // "pending", "approved", "rejected", "ordered"
    createdAt: v.number(),
    reviewedBy: v.optional(v.id("users")),
    reviewedAt: v.optional(v.number()),
  })
    .index("by_product", ["productId"])
    .index("by_status", ["status"])
    .index("by_urgency", ["urgency"])
    .index("by_created_at", ["createdAt"]),

  // External factors for enhanced forecasting
  externalFactors: defineTable({
    date: v.number(),
    factorType: v.string(), // "weather", "holiday", "promotion", "economic"
    factorValue: v.number(),
    description: v.string(),
    impact: v.string(), // "positive", "negative", "neutral"
  })
    .index("by_date", ["date"])
    .index("by_type", ["factorType"]),

  // Business settings
  businessSettings: defineTable({
    userId: v.id("users"),
    businessName: v.string(),
    businessType: v.string(), // "retail", "ecommerce", "restaurant", "warehouse"
    currency: v.string(),
    timezone: v.string(),
    defaultLeadTime: v.number(),
    defaultReorderPoint: v.number(),
    stockoutCostPercentage: v.number(),
    carryingCostPercentage: v.number(),
  }).index("by_user", ["userId"]),
};

export default defineSchema({
  ...applicationTables,
});
